Class {
	#name : #IceTipSelectRemotePresenter,
	#superclass : #SpPresenter,
	#instVars : [
		'remoteLabel',
		'remoteList',
		'addButton',
		'model'
	],
	#category : #'Iceberg-TipUI-View-Branch'
}

{ #category : #layout }
IceTipSelectRemotePresenter class >> defaultLayout [

	^ SpBoxLayout newLeftToRight
		  "add: #remoteLabel expand: false;"
		  add: #remoteList;
		  add: #addButton expand: false
]

{ #category : #'accessing - ui' }
IceTipSelectRemotePresenter >> addButton [

	^ addButton
]

{ #category : #actions }
IceTipSelectRemotePresenter >> addRemote [

	(IceTipAddRemoteDialog on: self model repositoryModel) 
		onAccept: [ :newRemoteName | 
			self model reset.
			self refresh.
			self selectRemoteNamed: newRemoteName ];
		openDialog.
]

{ #category : #accessing }
IceTipSelectRemotePresenter >> icon [

	^ self iconNamed: #add
]

{ #category : #initialization }
IceTipSelectRemotePresenter >> initializePresenters [

	super initializePresenters.

	remoteLabel := self newLabel
		label: 'Remote:';
		yourself.

	remoteList := self newDropList
		display: [ :each | each descriptionWithDecoration ];
		yourself.

	addButton := self newButton
		icon: self icon;
		action: [ self addRemote ];
		addStyle: 'small';
		yourself.

	self refresh.
	self selectRemoteNamed: self model remoteModel name.

]

{ #category : #accessing }
IceTipSelectRemotePresenter >> label [

	^ self remoteLabel label
]

{ #category : #accessing }
IceTipSelectRemotePresenter >> label: aString [

	self remoteLabel label: aString
]

{ #category : #accessing }
IceTipSelectRemotePresenter >> model [

	^ model
]

{ #category : #accessing }
IceTipSelectRemotePresenter >> refresh [

	remoteList items: self model remoteModels
]

{ #category : #'accessing - ui' }
IceTipSelectRemotePresenter >> remoteLabel [

	^ remoteLabel
]

{ #category : #'accessing - ui' }
IceTipSelectRemotePresenter >> remoteList [

	^ remoteList
]

{ #category : #accessing }
IceTipSelectRemotePresenter >> selectRemoteNamed: aString [

	remoteList selectItem:
		(self model remoteModels detect: [ :each | each name = aString ])
]

{ #category : #initialization }
IceTipSelectRemotePresenter >> setModelBeforeInitialization: anObject [

	model := anObject
]
